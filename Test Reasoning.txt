##### (done) 1 : Hào - quản lý nhân viên #####
Tôi là nhân viên công nghệ thông tin đang làm việc tại một công ty công nghệ. Tôi đang phát triển một hệ thống để quản lý nhân viên trong công ty bằng ngôn ngữ Java. Trong quá trình phát triển, tôi đã tạo ra một chương trình mô phỏng hệ thống. Tôi muốn kiểm tra xem đoạn mã đã hoạt động chính xác hay chưa. Việc kiểm tra phải được làm kỹ lưỡng vì đoạn mã này sẽ là tiền đề cho hệ thống của tôi. Đoạn mã của tôi hoạt động bằng cách nhận vào một danh sách nhân viên sau đó duyệt danh sách đó và tính tiền lương cho nhân viên. Nhân viên có các thuộc tính như tên, ngày làm việc và mức lương theo ngày.
Các ràng buộc mà đoạn mã cần phải tuân theo là: số ngày làm việc của nhân viên phải lớn hơn hoặc bằng 0, mức lương của nhân viên không được âm.
Hãy kiểm tra kết quả của đoạn mã dưới đây dự trên các trường hợp kiểm thử được cung cấp và giải thích chi tiết cho từng trường hợp.
Dưới đây là đoạn mã của tôi:
```java
import java.util.ArrayList;
import java.util.List;

class EmployeeInfomation {
    String name;
    int days;
    double salary;

    public EmployeeInfomation(String name, int days, double salary) {
        this.name = name;
        this.days = days;
        this.salary = salary;
    }
}

class SalaryCalculator {
    public static void main(String[] args) {
       
    }
}
```
Dưới đây là các trường hợp kiểm thử:
```java
//TH 1
 List<EmployeeInfomation> employees = new ArrayList<>();
        employees.add(new EmployeeInfomation("John", 20, 50));
        employees.add(new EmployeeInfomation("Jane", 15, 60));
        employees.add(new EmployeeInfomation("Doe", 22, 45));

        for (EmployeeInfomation emp : employees) {
            double totalSalary = emp.days * emp.salary;
            System.out.println("EmployeeInfomation: " + emp.name + ", Salary: $" + totalSalary);
        }
// TH 2
 List<EmployeeInfomation> employees = new ArrayList<>();
        employees.add(new EmployeeInfomation("sew", 0, 50)); 
        employees.add(new EmployeeInfomation("jee", 23, 55)); 
        employees.add(new EmployeeInfomation("Done", 30, 0)); 

        for (EmployeeInfomation emp : employees) {
            double totalSalary = emp.days * emp.salary;
            System.out.println("EmployeeInfomation: " + emp.name + ", Salary: $" + totalSalary);
        }
// TH 3
 List<EmployeeInfomation> employees = new ArrayList<>();
        for (EmployeeInfomation emp : employees) {
            double totalSalary = emp.days * emp.salary;
            System.out.println("EmployeeInfomation: " + emp.name + ", Salary: $" + totalSalary);
        }
```



##### 2 : Lộc - Tính toán tuyến đường tốt nhất GTS2 #####
Tôi là một lập trình viên làm việc trong một công ty logistic. Tôi được giao nhiệm vụ phát triển một hệ thống tối ưu hóa lộ trình giao hàng để giảm chi phí vận chuyển.
Tôi đã viết một chương trình sử dụng thuật toán tham lam GTS2 để giải quyết bài toán trên bằng ngôn ngữ Java. Trong quá trình phát triển một ứng dụng tối ưu hóa lộ trình giao hàng được viết bằng ngôn ngữ Java, tôi cần đảm bảo rằng kết quả đầu ra chính xác, ổn định. 
Hệ thống nhận vào một danh sách các địa điểm cần giao hàng, mỗi địa điểm có tọa độ (x, y). Vị trí kho hàng ban đầu, cũng được biểu diễn dưới dạng tọa độ (x, y).
Một số ràng buộc cần được đảm bảo: Đầu vào luôn là số nguyên dương, đầu ra sẽ luôn là đường đi từ thành phố này đến phố tiếp theo, chạy đến thành phố cuối cùng.
Kết quả trả về là một tuyến đường giao hàng tối ưu, đảm bảo quãng đường đi là ngắn nhất theo nguyên tắc tham lam: Xuất phát từ kho hàng, luôn chọn địa điểm gần nhất để di chuyển tiếp theo, lặp lại cho đến khi đã đi qua tất cả các địa điểm, quay lại kho hàng khi hoàn tất.
Hãy cung cấp cho tôi đầu ra và giải thích vì sao có được đầu ra tương ứng.
```java
import java.util.ArrayList;
import java.util.List;

class Location {
    double x, y;
    String name;

    public Location(String name, double x, double y) {
        this.name = name;
        this.x = x;
        this.y = y;
    }

    public double distanceTo(Location other) {
        return Math.sqrt(Math.pow(this.x - other.x, 2) + Math.pow(this.y - other.y, 2));
    }
}

public class GTS2DeliveryRouteOptimizer {

    public static List<Location> findOptimalRoute(Location warehouse, List<Location> locations) {
        if (locations == null || locations.isEmpty()) {
            throw new IllegalArgumentException("Danh sách địa điểm không được rỗng.");
        }

        List<Location> route = new ArrayList<>();
        route.add(warehouse);

        Location current = warehouse;
        List<Location> remainingLocations = new ArrayList<>(locations);

        while (!remainingLocations.isEmpty()) {
            Location nearest = findNearestLocation(current, remainingLocations);
            route.add(nearest);
            remainingLocations.remove(nearest);
            current = nearest;
        }

        route.add(warehouse);
        return route;
    }

    private static Location findNearestLocation(Location current, List<Location> locations) {
        Location nearest = locations.get(0);
        double minDistance = current.distanceTo(nearest);

        for (Location loc : locations) {
            double distance = current.distanceTo(loc);
            if (distance < minDistance) {
                nearest = loc;
                minDistance = distance;
            }
        }
        return nearest;
    }

    public static void main(String[] args) {

    }
}
```
Sau đây là các trường hợp kiểm thử cho đoạn mã trên:
```java
//TH1
Location warehouse = new Location("Kho hàng", 0, 0);
List<Location> locations = List.of(
    new Location("A", 2, 3),
    new Location("B", 5, 1),
    new Location("C", 1, 4),
    new Location("D", 6, 2),
    new Location("E", 4, 5),
    new Location("F", 7, 3) 
);

//TH2
Location warehouse = new Location("Kho hàng", 0, 0);
List<Location> locations = new ArrayList<>();

//TH3
Location warehouse = new Location("Kho hàng", 0, 0);
List<Location> locations = new ArrayList<>();
locations.add(new Location("A", 2, 3));
locations.add(null);
locations.add(new Location("B", 5, 1));
```



##### (done) 3 : Hào - Tối đa lợi nhuận cắt thanh sắt #####
Tôi là một lập trình viên làm việc tự do. Tôi đang nhận một dự án phát triển một hệ thống quản lý nguyên vật liệu cho một công xưởng, được viết bằng ngôn ngữ Java. Tôi đã làm một tính năng giúp tính toán việc phân đoạn các thanh sắt sao cho tối đa lợi nhuận. Tôi cần kiểm tra độ chính xác của đoạn mã. Kết quả kiểm tra phải được thực hiện cẩn thận vì nó sẽ giúp đoạn mã của tôi có độ tin cậy cao hơn từ phía khách hàng.
Đoạn mã của tôi nhận vào một danh sách chứa các giá trị bán ra của thanh sắt dựa trên độ dài (độ dài là chỉ mục của giá trị đó trong danh sách), và một số nguyên đại diện cho độ dài của thanh sắt cần cắt. Kết quả trả về là lợi nhuận lớn nhất có thể thu được từ việc cắt thanh sắt đó.
Hệ thống cần đáp ứng các yêu cầu sau để hoạt động ổn định: độ dài của thanh sắt được cho phải lớn hơn 0, các giá trị trong danh sách cũng phải lớn hơn 0 và được tính bằng đơn vị tiền tệ Việt Nam đồng. 
Dựa vào các trường hợp kiểm thử sau đây, hãy kiểm thử đoạn mã được cung cấp bên dưới sau đó đưa ra kết quả và giải thích chi tiết cho từng trường hợp.
Dưới đây là các trường hợp cần kiểm thử:
```java
int bar1 = 8; 
System.out.println(maxProfitCutting(price, bar1));

int bar2 = 0; 
System.out.println(maxProfitCutting(price, bar2));

int bar3 = 10; 
System.out.println(maxProfitCutting(price, bar3));
```

Đây là đoạn mã mà tôi đã viết:
```java
import java.util.*;
public class IronBarMaximumProfit {
    public static int maxProfitCutting(int[] price, int n) {
        int maxProfit = Integer.MIN_VALUE;
        if (n == 0) return 0;
        for (int i = 1; i <= n; i++) {
            maxProfit = Math.max(maxProfit, price[i - 1] + maxProfitCutting(price, n - i));
        }
        return maxProfit;
    }

    public static void main(String[] args) {
         int[] price = {10000, 50000, 80000, 90000, 100000, 170000, 200000}; 
    }
}
```