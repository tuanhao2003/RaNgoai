##### 5 : Khang - Tính toán sản phẩm có lợi nhuận cao nhất #####
Tôi là một lập trình viên làm việc tự do. Một công ty đang phát triển một hệ thống quản lý kho hàng để tối ưu hóa việc theo dõi và phân phối sản phẩm. Tôi đang phát triển một ứng dụng được viết bằng ngôn ngữ Java nhằm giải quyết bài toán tính toán lợi nhuận sản phẩm trong bối cảnh quản lý kho hàng.
Để đảm bảo tính chính xác và độ tin cậy của hệ thống, tôi cần kiểm tra kết quả đầu ra của chương trình dựa trên các tiêu chí cụ thể. Trong quá trình phát triển hệ thống, tôi cần đảm bảo rằng kết quả đầu ra luôn chính xác và không có lỗi khi nhập dữ liệu.
Hệ thống nhận vào danh sách sản phẩm với các thông tin:- Tên sản phẩm (chuỗi ký tự).- Số lượng sản phẩm (số nguyên, phải lớn hơn 0).- Giá vốn (số thực, phải lớn hơn 0).- Giá bán (số thực, phải lớn hơn 0).- Khi người dùng bỏ trống tên sản phẩm, quá trình nhập sẽ dừng lại và hệ thống sẽ bắt đầu tính toán lợi nhuận.
Kết quả trả về là tên của sản phẩm có lợi nhuận cao nhất.
Tuy nhiên, ứng dụng của tôi vẫn còn một số hạn chế như: Khi nhập sai dữ liệu (ví dụ: số lượng hoặc giá không hợp lệ), chương trình không cho phép nhập lại mà chỉ hiển thị lỗi. Nếu người dùng nhập trống hoặc nhập 0 ở phần số lượng, giá vốn hoặc giá bán, chương trình không xử lý linh hoạt. Chưa có cách để nhập lại dữ liệu nếu lỡ nhập sai mà không cần khởi động lại chương trình.
Hãy giúp tôi tái cấu trúc lại đoạn mã bên dưới để giải quyết các vấn đề được nêu bên trên, các thay đổi và chỉnh sửa không được chú thích trong mã mà cần phải được tóm tắt ở cuối.

Dưới đây là đoạn mã tôi đã viết:
```java
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Product {
    private String name;
    private int soluong;
    private double von;
    private double ban;

    public Product(String name, int soluong, double von, double ban) {
        if (soluong <= 0 || von <= 0 || ban <= 0) {
            throw new IllegalArgumentException("Số lượng, giá vốn và giá bán phải lớn hơn 0.");
        }
        this.name = name;
        this.soluong = soluong;
        this.von = von;
        this.ban = ban;
    }

    public double getProfit() {
        return (ban - von) * soluong;
    }

    public String getName() {
        return name;
    }
}

public class InventoryCalculator {
    public static Product getMaxProfitProduct(List<Product> products) {
        if (products == null || products.isEmpty()) {
            throw new IllegalArgumentException("Danh sách sản phẩm không được trống.");
        }
        return products.stream()
                .max((p1, p2) -> Double.compare(p1.getProfit(), p2.getProfit()))
                .orElseThrow();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Product> products = new ArrayList<>();

        while (true) {
            System.out.print("Nhập tên sản phẩm (bỏ trống để kết thúc): ");
            String name = scanner.nextLine().trim();
            if (name.isEmpty()) {
                break;
            }

            try {
                System.out.print("Nhập số lượng: ");
                int soluong = Integer.parseInt(scanner.nextLine().trim());

                System.out.print("Nhập giá vốn: ");
                double von = Double.parseDouble(scanner.nextLine().trim());

                System.out.print("Nhập giá bán: ");
                double ban = Double.parseDouble(scanner.nextLine().trim());

                products.add(new Product(name, soluong, von, ban));
            } catch (NumberFormatException e) {
                System.out.println("Vui lòng nhập số hợp lệ cho số lượng, giá vốn và giá bán.");
            } catch (IllegalArgumentException e) {
                System.out.println(e.getMessage());
            }
        }

        scanner.close();

        if (!products.isEmpty()) {
            Product maxProfitProduct = getMaxProfitProduct(products);
            System.out.println("Sản phẩm có lợi nhuận cao nhất: " + maxProfitProduct.getName());
        } else {
            System.out.println("Không có sản phẩm nào để tính toán.");
        }
    }
}
```
